nextflow_process {

    name "Test Process PROSEG"
    script "../main.nf"
    process "PROSEG2BAYSOR"

    tag "modules"
    tag "modules_nfcore"
    tag "proseg"
    tag "segmentation"
    tag "cell_segmentation"


    setup {
            run("UNZIP") {
                script "modules/nf-core/unzip/main.nf"
                process {
                    """
                    input[0] = [[], file('https://raw.githubusercontent.com/nf-core/test-datasets/spatialxe/Xenium_Prime_Mouse_Ileum_tiny_outs.zip', checkIfExists: true)]
                    """
                }
            }
            run("PROSEG") {
                script "modules/local/proseg/proseg/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                            [id: "test_run_proseg2baysor"],
                        ]).combine(UNZIP.out.unzipped_archive.map { it[1] } + "/transcripts.csv.gz")
                    """
                }
            }
    }

    test("proseg2baysor - cell_polygons, transcript_metadata") {

        when {
            process {
                """
                input[0] = Channel.of([
                            [id: "test_run_proseg2baysor"],
                        ]).combine(PROSEG.out.cell_polygons_2d)
                input[1] = PROSEG.out.transcript_metadata
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert file(process.out.xr_polygons.get(0).get(1).find { file(it).name == 'xr-cell-polygons.geojson' }).exists() },
                { assert file(process.out.xr_metadata.get(0).find { file(it).name == 'xr-transcript-metadata.csv' }).exists() },
            )
        }

    }

    test("proseg2baysor stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                            [id: "test_run_proseg2baysor"],
                        ]).combine(PROSEG.out.cell_polygons_2d)
                input[1] = PROSEG.out.transcript_metadata
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
